{"version":3,"sources":["../src/paket.fsx"],"names":[],"mappings":"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","file":"paket.js","sourcesContent":["module Ionide.VSCode.PaketService\n\n#r \"../node_modules/fable-core/Fable.Core.dll\"\n#load \"../node_modules/fable-import-vscode/Fable.Import.VSCode.fs\"\n\nopen System\nopen System.Text.RegularExpressions\n\nopen Fable.Core\nopen Fable.Import\nopen Fable.Import.Browser\nopen Fable.Import.Node\nopen Fable.Import.Node.child_process\n\n// HELPERS ----------------------------------------------\nmodule Helpers =\n    module Toml =\n        [<Emit(\"toml.parse($0)\")>]\n        let parse (str : string) : 'a = failwith \"JS\"\n\n    module JS =\n        [<Emit(\"($0[$1] != undefined)\")>]\n        let isPropertyDefined (o: obj) (key: string) : bool = failwith \"JS\"\n\n        [<Emit(\"(global[$0] != undefined)\")>]\n        let isGloballyDefined (key: string) : bool = failwith \"never\"\n\n        [<Emit(\"($0 != undefined)\")>]\n        let isDefined (o: obj) : bool = failwith \"never\"\n\n    // [<AutoOpen>]\n    // module Bindings =\n    //     type EventDelegate<'T> with\n    //         [<Emit(\"($0($1, $2, $3))\")>]\n    //         member __.Add(f : 'T -> _, args : obj, disposables : Disposable[]) : unit = failwith \"JS\"\n\n    // module EventHandler =\n    //     let add (f : 'T -> _) (args : obj) (disposables : Disposable[]) (ev : EventDelegate<'T>) =\n    //         ev.Add(f,args,disposables)\n\n    module Promise =\n        let success (a : 'T -> 'R) (pr : Promise<'T>) : Promise<'R> =\n            pr?``then`` $ a |> unbox\n\n        let bind (a : 'T -> Promise<'R>) (pr : Promise<'T>) : Promise<'R> =\n            pr?bind $ a |> unbox\n\n        let fail (a : obj -> 'T)  (pr : Promise<'T>) : Promise<'T> =\n            pr.catch(unbox a)\n\n        let either (a : 'T -> 'R) (b : obj -> 'R)  (pr : Promise<'T>) : Promise<'R> =\n            pr?``then`` $ (a, b) |> unbox\n\n        let lift<'T> (a : 'T) : Promise<'T> =\n            Promise.resolve(U2.Case1 a)\n\n        let toPromise (a : Thenable<'T>) = a |> unbox<Promise<'T>>\n\n        let toThenable (a : Promise<'T>) = a |> unbox<Thenable<'T>>\n\n    module VSCode =\n        let getPluginPath pluginName =\n            let ext = vscode.extensions.getExtension pluginName\n            ext.extensionPath\n\n    module Process =\n        let isWin () = ``process``.platform = \"win32\"\n        let isMono () = ``process``.platform = \"win32\" |> not\n\n        let onExit (f : obj -> _) (proc : ChildProcess) =\n            proc.on(\"exit\", f |> unbox) |> ignore\n            proc\n\n        let onOutput (f : obj -> _) (proc : ChildProcess) =\n            (proc.stdout :> NodeJS.EventEmitter).on(\"data\", f |> unbox) |> ignore\n            proc\n\n        let onError (f : obj -> _) (proc : ChildProcess) =\n            (proc.stderr :> NodeJS.EventEmitter).on(\"data\", f |> unbox) |> ignore\n            proc\n\n        let spawn location linuxCmd (cmd : string) =\n            let cmd' = if cmd = \"\" then [||] else cmd.Split(' ')\n            let options = obj ()\n            options?cwd <- vscode.workspace.rootPath\n            if isWin () || linuxCmd = \"\" then\n                child_process.spawn(location, unbox cmd', options)\n            else\n                let prms = Array.concat [ [|location|]; cmd']\n                child_process.spawn(linuxCmd, unbox prms, options)\n\n        let spawnWithNotification location linuxCmd (cmd : string) (outputChannel : vscode.OutputChannel) =\n            spawn location linuxCmd cmd\n            |> onOutput(fun e -> e.ToString () |> outputChannel.append)\n            |> onError (fun e -> e.ToString () |> outputChannel.append)\n\n        let exec location linuxCmd cmd : Promise<Error * Buffer *Buffer> =\n            let options = createObj [\"cwd\" ==> vscode.workspace.rootPath]\n            Promise.Create<Error * Buffer *Buffer>(fun resolve (error : Func<obj,_>) ->\n                child_process.exec(\n                    sprintf \"%s%s %s\" (if isWin() then \"\" else linuxCmd + \" \") location cmd,\n                    options,\n                    Func<_,_,_,_>(fun e i o -> resolve$(e,i,o) |> ignore)) |> ignore)\n// HELPERS ----------------------------------------------\n\nlet (</>) a b =\n    if Helpers.Process.isWin ()\n    then a + @\"\\\" + b\n    else a + \"/\" + b\n\nlet localPaketDir = vscode.workspace.rootPath </> \".paket\"\nlet localPaket    = localPaketDir </>  \"paket.exe\"\nlet localBootstrapper = localPaketDir </> \"paket.bootstrapper.exe\"\n\nlet private location =\n    if fs.existsSync localPaketDir then  localPaket else\n    (Helpers.VSCode.getPluginPath \"Ionide.Ionide-Paket\") </> \"bin\" </> \"paket.exe\"\n\nlet private bootstrapperLocation =\n    if fs.existsSync localPaketDir then  localBootstrapper else\n    (Helpers.VSCode.getPluginPath \"Ionide.Ionide-Paket\") </> \"bin\" </> \"paket.bootstrapper.exe\"\n\nlet private spawnPaket cmd =\n    let outputChannel = vscode.window.createOutputChannel \"Paket\"\n    outputChannel.clear ()\n    outputChannel.append (location+\"\\n\")\n    vscode.window.showInformationMessage (\"Paket started\", \"Open\")\n    |> Helpers.Promise.toPromise\n    |> Helpers.Promise.success(fun n ->\n        if n = \"Open\" then outputChannel.show (2 |> unbox) )\n    |> ignore\n\n    Helpers.Process.spawnWithNotification location \"mono\" cmd outputChannel\n    |> Helpers.Process.onExit(fun (code) ->\n        if code.ToString() =\"0\" then\n            vscode.window.showInformationMessage \"Paket completed\" |> ignore\n        else\n            vscode.window.showErrorMessage \"Paket failed\" |> ignore)\n    |> ignore\n\nlet private execPaket cmd =\n    if not (fs.existsSync location) then\n        Helpers.Process.exec bootstrapperLocation \"mono\" \"\"\n        |> Helpers.Promise.bind (fun _ -> Helpers.Process.exec location \"mono\" cmd)\n    else\n    Helpers.Process.exec location \"mono\" cmd\n\nlet private handlePaketList (error : Error, stdout : Buffer, stderr : Buffer) =\n    if(stdout.toString() = \"\") then\n        [||]\n    else\n        stdout.toString().Split('\\n')\n        |> Array.filter((<>) \"\" )\n\nlet UpdatePaketSilent () = Helpers.Process.spawn bootstrapperLocation \"mono\" \"\"\nlet Init () = \"init\" |> spawnPaket\nlet Update () = \"update\" |> spawnPaket\nlet Install () = \"install\" |> spawnPaket\nlet Outdated () = \"outdated\" |> spawnPaket\nlet Restore () = \"restore\" |> spawnPaket\nlet AutoRestoreOn () = \"auto-restore on\" |> spawnPaket\nlet AutoRestoreOff () = \"auto-restore off\" |> spawnPaket\nlet ConvertFromNuget () = \"convert-from-nuget\" |> spawnPaket\nlet Simplify () = \"simplify\" |> spawnPaket\n\nlet inputOptions = createEmpty<vscode.InputBoxOptions>\n\nlet Add () =\n    (vscode.window.showInputBox inputOptions)\n    |> Helpers.Promise.toPromise\n    |> Helpers.Promise.success (fun n ->\n        if Helpers.JS.isDefined n then  sprintf \"add nuget %s\" n  |> spawnPaket)\n    |> ignore\n\nlet AddToCurrent () =\n    let fn = vscode.window.activeTextEditor.document.fileName\n    if fn.EndsWith(\".fsproj\") then\n        (vscode.window.showInputBox inputOptions)\n        |> Helpers.Promise.toPromise\n        |> Helpers.Promise.success (fun n ->\n            if Helpers.JS.isDefined n then sprintf \"add nuget %s project \\\"%s\\\"\" n fn |> spawnPaket)\n        |> ignore\n    else\n        vscode.window.showErrorMessage \"fsproj file needs to be opened\" |> ignore\n\nlet UpdateGroup () =\n    \"show-groups -s\"\n    |> execPaket\n    |> Helpers.Promise.success (handlePaketList)\n    |> (unbox >> vscode.window.showQuickPick)\n    |> Helpers.Promise.toPromise\n    |> Helpers.Promise.success (fun n ->\n        if Helpers.JS.isDefined n then sprintf \"update group %s\" n |> spawnPaket)\n    |> ignore\n\nlet UpdatePackage () =\n    \"show-installed-packages -s\"\n    |> execPaket\n    |> Helpers.Promise.success (handlePaketList)\n    |> (unbox >> vscode.window.showQuickPick)\n    |> Helpers.Promise.toPromise\n    |> Helpers.Promise.success (fun n -> \n        if Helpers.JS.isDefined n then \n            let group = n.Split(' ').[0].Trim()\n            let name = n.Split(' ').[1].Trim()\n            sprintf \"update nuget %s group %s\" name group |> spawnPaket)\n    |> ignore\n\nlet UpdatePackageCurrent () =\n    let fn = vscode.window.activeTextEditor.document.fileName\n    if fn.EndsWith(\".fsproj\") then\n        \"show-installed-packages -s\"\n        |> execPaket\n        |> Helpers.Promise.success (handlePaketList)\n        |> (unbox >> vscode.window.showQuickPick)\n        |> Helpers.Promise.toPromise\n        |> Helpers.Promise.success (fun n -> \n            if Helpers.JS.isDefined n then \n                let group = n.Split(' ').[0].Trim()\n                let name = n.Split(' ').[1].Trim()\n                sprintf \"update nuget %s project \\\"%s\\\" group %s\" name fn group |> spawnPaket)\n        |> ignore\n    else\n        vscode.window.showErrorMessage \"fsproj file needs to be opened\" |> ignore\n\nlet RemovePackage () =\n    \"show-installed-packages -s\"\n    |> execPaket\n    |> Helpers.Promise.success (handlePaketList)\n    |> (unbox >> vscode.window.showQuickPick)\n    |> Helpers.Promise.toPromise\n    |> Helpers.Promise.success (fun (n :string) -> \n        if Helpers.JS.isDefined n then \n            let group = n.Split(' ').[0].Trim()\n            let name = n.Split(' ').[1].Trim()\n            sprintf \"remove nuget %s group %s\" name group |> spawnPaket)\n    |> ignore\n\nlet RemovePackageCurrent () =\n    let fn = vscode.window.activeTextEditor.document.fileName\n    if fn.EndsWith(\".fsproj\") then\n        \"show-installed-packages -s\"\n        |> execPaket\n        |> Helpers.Promise.success (handlePaketList)\n        |> (unbox >> vscode.window.showQuickPick)\n        |> Helpers.Promise.toPromise\n        |> Helpers.Promise.success (fun n -> \n            if Helpers.JS.isDefined n then \n                let group = n.Split(' ').[0].Trim()\n                let name = n.Split(' ').[1].Trim()\n                sprintf \"remove nuget %s project \\\"%s\\\" group %s\" name fn group |> spawnPaket)\n        |> ignore\n    else\n        vscode.window.showErrorMessage \"fsproj file needs to be opened\" |> ignore\n\nlet activate(context: vscode.ExtensionContext) =\n    let registerCommand com (f: unit->unit) =\n        vscode.commands.registerCommand(com, unbox f)\n        |> context.subscriptions.Add\n    UpdatePaketSilent () |> ignore\n    registerCommand \"paket.Init\" Init\n    registerCommand \"paket.Install\" Install\n    registerCommand \"paket.Update\" Update\n    registerCommand \"paket.Outdated\" Outdated\n    registerCommand \"paket.Restore\" Restore\n    registerCommand \"paket.AutoRestoreOn\" AutoRestoreOn\n    registerCommand \"paket.AutoRestoreOff\" AutoRestoreOff\n    registerCommand \"paket.ConvertFromNuget\" ConvertFromNuget\n    registerCommand \"paket.Simplify\" Simplify\n    registerCommand \"paket.Add\" Add\n    registerCommand \"paket.AddToCurrent\" AddToCurrent\n    registerCommand \"paket.UpdateGroup\" UpdateGroup\n    registerCommand \"paket.UpdatePackage\" UpdatePackage\n    registerCommand \"paket.UpdatePackageCurrent\" UpdatePackageCurrent\n    registerCommand \"paket.RemovePackage\" RemovePackage\n    registerCommand \"paket.RemovePackageCurrent\" RemovePackageCurrent\n    ()\n"]}